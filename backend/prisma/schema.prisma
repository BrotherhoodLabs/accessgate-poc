// AccessGate PoC - RBAC Schema
// Prisma schema for Role-Based Access Control system

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        String   @id @default(uuid())
  email     String   @unique
  password  String
  firstName String
  lastName  String
  isActive  Boolean  @default(true)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  userRoles UserRole[]
  assignedRoles UserRole[] @relation("RoleAssigner")

  @@map("users")
}

model Role {
  id          String   @id @default(uuid())
  name        String   @unique
  description String
  isActive    Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  userRoles       UserRole[]
  rolePermissions RolePermission[]

  @@map("roles")
}

model Permission {
  id          String   @id @default(uuid())
  name        String   @unique
  resource    String
  action      String
  description String
  createdAt   DateTime @default(now())

  // Relations
  rolePermissions RolePermission[]

  @@map("permissions")
}

model UserRole {
  userId      String
  roleId      String
  assignedAt  DateTime @default(now())
  assignedBy  String

  // Relations
  user        User @relation(fields: [userId], references: [id], onDelete: Cascade)
  role        Role @relation(fields: [roleId], references: [id], onDelete: Cascade)
  assigner    User @relation("RoleAssigner", fields: [assignedBy], references: [id])

  @@id([userId, roleId])
  @@map("user_roles")
}

model RolePermission {
  roleId       String
  permissionId String
  assignedAt   DateTime @default(now())

  // Relations
  role         Role       @relation(fields: [roleId], references: [id], onDelete: Cascade)
  permission   Permission @relation(fields: [permissionId], references: [id], onDelete: Cascade)

  @@id([roleId, permissionId])
  @@map("role_permissions")
}
