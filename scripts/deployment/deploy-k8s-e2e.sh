#!/bin/bash
# Script de d√©ploiement Kubernetes pour les tests E2E

set -e

echo "üöÄ D√©ploiement Kubernetes pour tests E2E AccessGate PoC"
echo "======================================================"

# V√©rifier kubectl
if ! command -v kubectl &> /dev/null; then
    echo "‚ùå kubectl n'est pas install√©"
    exit 1
fi

# V√©rifier que le cluster est accessible
if ! kubectl cluster-info &> /dev/null; then
    echo "‚ùå Cluster Kubernetes non accessible"
    exit 1
fi

NAMESPACE="accessgate-poc"

echo "üì¶ Cr√©ation du namespace..."
kubectl create namespace $NAMESPACE --dry-run=client -o yaml | kubectl apply -f -

echo "üóÑÔ∏è D√©ploiement PostgreSQL..."
kubectl apply -f k8s/postgres.yaml -n $NAMESPACE

echo "‚è≥ Attente de PostgreSQL..."
kubectl wait --for=condition=ready pod -l app=postgres -n $NAMESPACE --timeout=300s

echo "üîß Application des migrations de base de donn√©es..."
# Attendre que PostgreSQL soit compl√®tement pr√™t
sleep 10

# Ex√©cuter les migrations via un pod temporaire
kubectl run postgres-migrate --image=postgres:15 --rm -i --restart=Never -n $NAMESPACE -- \
  psql -h postgres-service -U accessgate -d accessgate_poc -c "
    CREATE TABLE IF NOT EXISTS users (
      id UUID PRIMARY KEY DEFAULT gen_random_uuid(),
      email VARCHAR(255) UNIQUE NOT NULL,
      password VARCHAR(255) NOT NULL,
      first_name VARCHAR(100) NOT NULL,
      last_name VARCHAR(100) NOT NULL,
      is_active BOOLEAN DEFAULT true,
      created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
      updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
    );
    
    CREATE TABLE IF NOT EXISTS roles (
      id UUID PRIMARY KEY DEFAULT gen_random_uuid(),
      name VARCHAR(100) UNIQUE NOT NULL,
      description TEXT,
      created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
    );
    
    CREATE TABLE IF NOT EXISTS permissions (
      id UUID PRIMARY KEY DEFAULT gen_random_uuid(),
      name VARCHAR(100) UNIQUE NOT NULL,
      resource VARCHAR(100) NOT NULL,
      description TEXT,
      created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
    );
    
    CREATE TABLE IF NOT EXISTS user_roles (
      id UUID PRIMARY KEY DEFAULT gen_random_uuid(),
      user_id UUID REFERENCES users(id) ON DELETE CASCADE,
      role_id UUID REFERENCES roles(id) ON DELETE CASCADE,
      created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
      UNIQUE(user_id, role_id)
    );
    
    CREATE TABLE IF NOT EXISTS role_permissions (
      id UUID PRIMARY KEY DEFAULT gen_random_uuid(),
      role_id UUID REFERENCES roles(id) ON DELETE CASCADE,
      permission_id UUID REFERENCES permissions(id) ON DELETE CASCADE,
      created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
      UNIQUE(role_id, permission_id)
    );
    
    -- Ins√©rer des donn√©es de test
    INSERT INTO roles (name, description) VALUES 
      ('Admin', 'Administrateur syst√®me'),
      ('Manager', 'Gestionnaire d''√©quipe'),
      ('User', 'Utilisateur standard')
    ON CONFLICT (name) DO NOTHING;
    
    INSERT INTO permissions (name, resource, description) VALUES 
      ('user.read', 'users', 'Lire les utilisateurs'),
      ('user.write', 'users', 'Modifier les utilisateurs'),
      ('role.read', 'roles', 'Lire les r√¥les'),
      ('role.write', 'roles', 'Modifier les r√¥les'),
      ('permission.read', 'permissions', 'Lire les permissions'),
      ('permission.write', 'permissions', 'Modifier les permissions')
    ON CONFLICT (name) DO NOTHING;
    
    -- Assigner des permissions aux r√¥les
    INSERT INTO role_permissions (role_id, permission_id)
    SELECT r.id, p.id FROM roles r, permissions p
    WHERE r.name = 'Admin'
    ON CONFLICT DO NOTHING;
    
    INSERT INTO role_permissions (role_id, permission_id)
    SELECT r.id, p.id FROM roles r, permissions p
    WHERE r.name = 'Manager' AND p.name IN ('user.read', 'role.read')
    ON CONFLICT DO NOTHING;
    
    INSERT INTO role_permissions (role_id, permission_id)
    SELECT r.id, p.id FROM roles r, permissions p
    WHERE r.name = 'User' AND p.name IN ('user.read')
    ON CONFLICT DO NOTHING;
  "

echo "üîß D√©ploiement Backend..."
kubectl apply -f k8s/backend.yaml -n $NAMESPACE

echo "‚è≥ Attente du Backend..."
kubectl wait --for=condition=ready pod -l app=accessgate-backend -n $NAMESPACE --timeout=300s

echo "üåê D√©ploiement Frontend..."
kubectl apply -f k8s/frontend.yaml -n $NAMESPACE

echo "‚è≥ Attente du Frontend..."
kubectl wait --for=condition=ready pod -l app=accessgate-frontend -n $NAMESPACE --timeout=300s

echo "üìä V√©rification du statut des pods..."
kubectl get pods -n $NAMESPACE

echo "üîó Configuration des services..."
kubectl apply -f k8s/services.yaml -n $NAMESPACE

echo "‚úÖ D√©ploiement termin√©!"
echo ""
echo "Pour ex√©cuter les tests E2E:"
echo "  python3 scripts/e2e-test-runner.py"
echo ""
echo "Pour acc√©der √† l'application:"
echo "  kubectl port-forward service/accessgate-frontend-service 3001:3000 -n $NAMESPACE"
echo "  kubectl port-forward service/accessgate-backend-service 8001:8000 -n $NAMESPACE"
